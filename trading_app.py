import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from datetime import time

# --- St√≠lusbe√°ll√≠t√°sok a l√°tv√°nyosabb diagramokhoz (s√∂t√©t t√©ma) ---
plt.style.use('dark_background')
plt.rcParams['figure.facecolor'] = '#0E1117' # Streamlit s√∂t√©t h√°tt√©rsz√≠n
plt.rcParams['axes.facecolor'] = '#0E1117'

# --- Az adatelemz≈ë funkci√≥k (v√°ltozatlanok) ---

def load_and_prepare_data(uploaded_file):
    """Bet√∂lti a felt√∂lt√∂tt f√°jlt √©s el≈ëk√©sz√≠ti az adatokat."""
    try:
        df = pd.read_csv(uploaded_file)
        df.rename(columns={
            "K√≥d": "symbol", "Nyit√°si ir√°ny": "direction", "Z√°r√°si id≈ë (UTC+0)": "close_time",
            "Nett√≥ ‚Ç¨": "net_profit", "Egyenleg ‚Ç¨": "balance", "Z√°r√≥ mennyis√©g": "lots"
        }, inplace=True)

        df['close_time'] = pd.to_datetime(df['close_time'], format='%d/%m/%Y %H:%M:%S.%f')
        for col in ['net_profit', 'balance']:
            df[col] = pd.to_numeric(df[col], errors='coerce')
        df['lots'] = df['lots'].str.extract(r'(\d+\.\d+)').astype(float)
        df['profitable'] = df['net_profit'] > 0
        return df
    except Exception as e:
        st.error(f"Hiba t√∂rt√©nt a f√°jl feldolgoz√°sa k√∂zben: {e}")
        return None

def calculate_key_stats(df):
    """Kisz√°molja √©s visszaadja a f≈ëbb statisztikai mutat√≥kat egy sz√≥t√°rban."""
    total_trades = len(df)
    winning_trades = df[df['profitable'] == True]
    losing_trades = df[df['profitable'] == False]
    
    win_rate = (len(winning_trades) / total_trades) * 100 if total_trades > 0 else 0
    total_profit = df['net_profit'].sum()
    
    total_gains = winning_trades['net_profit'].sum()
    total_losses = abs(losing_trades['net_profit'].sum())
    
    avg_win = winning_trades['net_profit'].mean() if len(winning_trades) > 0 else 0
    avg_loss = losing_trades['net_profit'].mean() if len(losing_trades) > 0 else 0
    
    profit_factor = total_gains / total_losses if total_losses > 0 else float('inf')
    expectancy = (win_rate/100 * avg_win) + ((100-win_rate)/100 * avg_loss)

    return {
        "√ñsszes trade": total_trades,
        "Nyer√©si ar√°ny": f"{win_rate:.2f}%",
        "Teljes nett√≥ profit": f"{total_profit:.2f} ‚Ç¨",
        "Profit Faktor": f"{profit_factor:.2f}",
        "V√°rhat√≥ √©rt√©k/trade": f"{expectancy:.2f} ‚Ç¨",
        "√Åtlagos nyer≈ë trade": f"{avg_win:.2f} ‚Ç¨",
        "√Åtlagos veszt≈ë trade": f"{avg_loss:.2f} ‚Ç¨",
    }

# --- A STREAMLIT ALKALMAZ√ÅS FEL√âP√çT√âSE ---

# Oldal konfigur√°ci√≥ja (c√≠m, ikon)
st.set_page_config(layout="wide", page_title="Trading Napl√≥ Anal√≠zis")

# F≈ëc√≠m
st.title('üìä Trading Napl√≥ Anal√≠zis')

# Oldals√°v (Sidebar) a f√°jlfelt√∂lt√©shez
with st.sidebar:
    st.header("Be√°ll√≠t√°sok")
    uploaded_file = st.file_uploader("T√∂ltsd fel a CSV riportodat", type=["csv"])

# F≈ë tartalom
if uploaded_file is None:
    st.info("K√©rlek, t√∂lts fel egy CSV f√°jlt az elemz√©s megkezd√©s√©hez az oldals√°von.")
else:
    # Adatok bet√∂lt√©se √©s feldolgoz√°sa
    trading_data = load_and_prepare_data(uploaded_file)
    
    if trading_data is not None:
        # F≈ë statisztik√°k megjelen√≠t√©se metrik√°kkal
        stats = calculate_key_stats(trading_data)
        st.header("F≈ëbb Keresked√©si Statisztik√°k")
        cols = st.columns(4)
        cols[0].metric("Teljes Nett√≥ Profit", stats["Teljes nett√≥ profit"])
        cols[1].metric("Nyer√©si Ar√°ny", stats["Nyer√©si ar√°ny"])
        cols[2].metric("Profit Faktor", stats["Profit Faktor"])
        cols[3].metric("√ñsszes Trade", stats["√ñsszes trade"])

        # F√ºlek l√©trehoz√°sa a k√ºl√∂nb√∂z≈ë elemz√©seknek
        tab1, tab2, tab3, tab4 = st.tabs(["üìà Egyenleg G√∂rbe", "üèõÔ∏è Instrumentumok", "‚öñÔ∏è Buy vs. Sell", "üìÖ H√©t Napjai"])

        with tab1:
            st.subheader("Egyenleg alakul√°sa az id≈ë f√ºggv√©ny√©ben")
            fig, ax = plt.subplots(figsize=(7, 3)) # M√âRET M√ìDOS√çTVA
            ax.plot(trading_data['close_time'], trading_data['balance'], color='#FF5733', label='Egyenleg (‚Ç¨)')
            ax.fill_between(trading_data['close_time'], trading_data['balance'], alpha=0.3, color='#FF5733')
            ax.set_title('Egyenleg alakul√°sa')
            ax.set_xlabel('D√°tum')
            ax.set_ylabel('Egyenleg (‚Ç¨)')
            ax.grid(True, linestyle='--', alpha=0.3)
            ax.legend()
            st.pyplot(fig)

        with tab2:
            st.subheader("Teljes√≠tm√©ny instrumentumonk√©nt")
            symbol_performance = trading_data.groupby('symbol').agg(
                total_profit=('net_profit', 'sum'),
                trade_count=('symbol', 'count'),
                win_rate=('profitable', lambda x: x.mean() * 100)
            ).round(2).sort_values('total_profit', ascending=True)
            
            st.dataframe(symbol_performance)
            
            fig, ax = plt.subplots(figsize=(7, 3)) # M√âRET M√ìDOS√çTVA
            colors = ['#2ECC71' if x > 0 else '#E74C3C' for x in symbol_performance['total_profit']]
            sns.barplot(x=symbol_performance['total_profit'], y=symbol_performance.index, palette=colors, ax=ax, orient='h')
            ax.set_title('Nett√≥ Profit Instrumentumonk√©nt (‚Ç¨)')
            ax.set_xlabel('Nett√≥ Profit (‚Ç¨)')
            ax.set_ylabel('Instrumentum')
            st.pyplot(fig)

        with tab3:
            st.subheader("Buy vs. Sell poz√≠ci√≥k √∂sszehasonl√≠t√°sa")
            performance = trading_data.groupby('direction')['profitable'].value_counts(normalize=True).unstack().fillna(0)
            performance = (performance * 100).round(2)
            performance.rename(columns={True: 'Nyer≈ë (%)', False: 'Veszt≈ë (%)'}, inplace=True)
            
            st.dataframe(performance)

            fig, ax = plt.subplots()
            performance.plot(kind='bar', stacked=True, color=['#E74C3C', '#2ECC71'], ax=ax, figsize=(5, 3)) # M√âRET M√ìDOS√çTVA
            ax.set_title('Buy vs. Sell: Nyer≈ë/Veszt≈ë ar√°ny')
            ax.set_ylabel('Sz√°zal√©kos ar√°ny (%)')
            ax.set_xlabel('Poz√≠ci√≥ ir√°nya')
            ax.tick_params(axis='x', rotation=0)
            st.pyplot(fig)

        with tab4:
            st.subheader("Teljes√≠tm√©ny a h√©t napjai szerint")
            trading_data['day_of_week'] = trading_data['close_time'].dt.day_name()
            days_order = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
            day_performance = trading_data.groupby('day_of_week').agg(
                total_profit=('net_profit', 'sum'),
                trade_count=('symbol', 'count'),
                win_rate=('profitable', lambda x: x.mean() * 100)
            ).reindex(days_order).dropna().round(2)
            
            st.dataframe(day_performance)

            fig, ax = plt.subplots(figsize=(7, 3)) # M√âRET M√ìDOS√çTVA
            colors = ['#2ECC71' if x > 0 else '#E74C3C' for x in day_performance['total_profit']]
            sns.barplot(x=day_performance.index, y=day_performance['total_profit'], palette=colors, ax=ax)
            ax.set_title('Nett√≥ Profit a H√©t Napjai Szerint (‚Ç¨)')
            ax.set_ylabel('Nett√≥ Profit (‚Ç¨)')
            ax.set_xlabel('Nap')
            st.pyplot(fig)